TODO/bugs in Irssi SILC client
==============================

 o Add local command to switch the channel's private key when channel has
   several private keys.  Currently sending channel messages with many
   keys is not possible because changing the key is not possible by the
   user.

 o JOINing to +a (requires passphrase to JOIN) does not work on autojoin.
   Seems the passwords in the .silc/config has no effect.

 o Add local commands to list the current server and client public keys
   that the user has.  And a local command to dump the contents of the
   public key to the screen.  Something like LISTKEYS, SHOWKEY...

 o We should get rid of the clientconfig.[ch] in Irssi SILC and move the
   cipher, hash, hmac and pkcs configuration to the Irssi SILC's config
   file.

 o Add PERL scripting support from Irssi CVS.

 o Extend the /HELP command to support sub commands or something.  So
   that user can say /help set mutual_authentication they would get
   help of the mutual_authentication setting.

 o Set different kind of settings, like, /set mutual_authentication,
   /set key_exchange_timeout, /set conn_auth_timeout etc etc.


TODO/bugs In SILC Client Library
================================

 o When changing own nickname and there exists a same nickname the library
   can give the client now nickname in format nick@host.  This is new
   behaviour and maybe should be removed.  The changer should always
   get the one it wants and not have the formatted nickname.


TODO/bugs In SILC Server
========================

 o Backup router related issues

 	o Channel user mode changes are notified unnecessarely when
	  switching to backup router on router crash.

 o Add a timeout to handling incoming JOIN commands.  It should be 
   enforced that JOIN command is executed only once in a second or two
   seconds.  Now it is possible to accept n incoming JOIN commands
   and process them without any timeouts.  THis must be employed because
   each JOIN command will create and distribute the new channel key
   to everybody on the channel.

 o New configuration file format must be added.  The new one will be
   done using the dotconf config library (lib/dotconf).  The following
   tasks relates closely to this as well and must be done at the same time
   when adding the new config file format:

	o Server says that it is able to listen on multiple ports but
	  currently that is bogus.  It can, but internals are for single
	  server.

 	o Protocol execution timeouts are hard coded, should be
	  configurable.

 	o IP address fields in configuration file should accept mask
	  format as well, IP/MASK, and not just plain IP.

 o If client's public key is saved in the server (and doing public key
   authentication) then the hostname and the username information could
   be taken from the public key.  Should be a configuration option!


TODO/bugs In SILC Libraries
===========================

 o WIN32 silc_net_create_connection_async does not work the same way
   than on Unix.  Do it with threads on WIN32.  The function works but
   is not actually async currently.

 o Rewrite the lib/silcsim/silcsim.h.  The SilcSimContext should be
   private and silc_sim_alloc should take necessary arguments.


TODO in SILC Protocol
=====================

 o Add "request parameters" or similar to the WHOIS command, which can
   be used to request various parameters (something not returned by
   standard WHOIS command) about clients (info that could be fetched
   even from clients).  Additional specification (or appendix) should 
   be done to define the payload and the parameters.  It could be used
   to make the WHOIS command support various search conditions as well.
   This would be the way to extend the WHOIS command to support various
   new features without always making the command incompatible to previous
   version.  To be included in protocol version 1.1.

 o Re-define the Status Payload: it is now 16 bits, split it into two
   8 bits fields.  First field includes status types from 0 - 9 and
   10 - n *if* it is not an list of errors.  If it is list of errors then
   the first field includes 1, 2 and/or 3, and the second field includes
   the error status 10 - n.  This way it is possible to send multiple
   errors (list of errors) and we have a way to tell the receiver that
   there will be other errors as well.  The second field is used only
   if there is list of errors.  If normal status, or normal (single)
   error status the second field is set to zero, and must be ignored.
   Hence, the status works same way as now except for list of errors.
   To be included in protocol version 1.1.

 o Define that WHOIS and IDENTIFY commands must send list of errors
   if multiple Client ID (or Channel ID and Server ID for IDENTIFY) was
   requested and was not found.  Each unfound entry must cause an error
   command reply to the sender.  Also define that errors must be sent
   *after* sending successfully found entries (this way receiver may
   ignore them).  To be included in protocol version 1.1.


TODO After 1.0
==============

 o Compression routines are missing.  The protocol supports packet
   compression thus it must be implemented.  SILC Zip API must be
   defined.  zlib package is already included into the lib dir (in CVS,
   not in distribution), but it is not used yet, and it requires some
   tweaking on the Makefiles (we want static lib not shared).

 o Implement the defined SilcDH API.  The definition is in
   lib/silccrypt/silcdh.h.

 o Add builtin SOCKS and HTTP Proxy support, well the SOCKS at least.
   SILC currently supports SOCKS4 and SOCKS5 but it needs to be compiled
   in separately.

 o X.509 certificate support.  SILC protocol supports certificates and
   it would be great to have support for them.  This is a big task as
   support has to be made for ASN.1 as well.  I've looked into OpenSSL 
   package as it has X.509 certificate support (and ASN.1 as well).  
   The code does not look very good to my eye but it has some potentials.
   This should be looked at more closely.

   Naturally own SILC Certificate API has to be defined regardles what
   the actual X.509 library is (OpenSSL X.509 or something else).  Other
   choice is to write own X.509 library but I'm not going to do it - 
   I can help to migrate the OpenSSL X.509 into SILC and I can help if 
   someone would like to write the X.509 library - but I'm not going 
   to start writing one myself.  Anyhow, the OpenSSL X.509 lib should
   be checked.

   Other package that should be checked is the NSS's X509 library,
   which I like more over OpenSSL package.

 o SSH2 public keys support.

 o OpenPGP certificate support.

 o Cipher optimizations (asm, that this) at least for i386 would be nice.
