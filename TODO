TODO General
============

 o We should replace all short, int, long, unsigned short, unsigned int,
   unsigned long with some pre-defined datatypes that really are what
   we want on all platforms.  int16, uint16, int32, uint32 etc. are
   what we could use or maybe SilcInt16, SilcUInt16 etc.  Also, boolean
   datatype should be defined.


TODO In SILC Client Library
===========================

 o Client library crashes if for example server timeouts protocol
   execution and disconnects the client.  The client, on the other hand
   may still assume that the connection is active, even after receiving
   the EOF.  Reason for this is that the clien library does not handle
   the SilcSocketConnection reference counter at all.  This must be
   fixed.

 o I guess, public key authentication (when connecting to a server)
   is not working currently.  It is just matter of loading the keys
   from file and using them (see corresponding code in server).

 o Add client library parameters or options that handle what kind of
   messages the library should print out (using `say' client operation,
   for example) and what is left for the application to print.  The
   appliation could for example set that it handles all command printing
   but all error printing should be handled by the library, etc...
   This is not a showstopper.

 o Input line on UI is buggy.  Cursor movement etc bugs.  Too lazy to
   fix it.


TODO In SILC Server
===================

 o TODO in commands (command.c and command_reply.c):

	o RESTART is not implemented
	o In servers all command reply funtions should still call the
	  pending command reply even if the reply was error.  In client
	  it is not called but in server, I think, it must be called.
	  When implementing this check that all commands handle the
	  situation correctly when it is called as pending command
	  (it should most likely check that cmd->pending == TRUE/FALSE).

 o TODO in notify types (packet_receive.c):

	o SERVER_SIGNOFF notify type is not implemented

 o Acceptance of incoming connections (client and server connections)
   should be checked before key exchange protocol.  Currently it is
   checked at the authentication phase after KE, that is ok, but it should
   be checked before starting KE, as well.

 o DNS/IP lookup blocks the server.  This must be fixed.  Check the
   resolver stuff (resolver(3), resolver(5)).  Either we have to do the
   own resolver stuff (through scheduler, if possible without writing
   too much own stuff) or use threads.

 o Packet processing can be made faster. All packet function in the
   packet_receive.c has same prototypes.  Instead of calling those from
   huge switch() make a table of callback functions that can be called
   directly by the packet type.

 o Server says that it is able to listen on multiple ports but currently
   that is bogus.  It can, but internals are for single server.

 o Protocol execution timeouts are hard coded, should be configurable.

 o IP address fields in configuration file should accept mask format
   as well, IP/MASK, and not just plain IP.

 o Connection classes should be actually implemented in serverconfig.c.
   They can be defined but they are totally ignored currently.


TODO In SILC Libraries
======================

 o Implement PFS (Perfect Forward Secrecy) flag in SKE (and in client and
   server, actually).  If PFS is set, re-key must cause new key exchange.
   This is required by the SILC protocol.

 o Re-key in general is actually missing (from everywhere) and must be done.

 o Compression routines are missing.  The protocol supports packet
   compression thus it must be implemented.  SILC Comp API must be
   defined.  zlib package is already included into the lib dir (in CVS,
   not in distribution), but it is not used yet, and it requires some
   tweaking on the Makefiles (we want static lib not shared).

 o Rewrite the task system.  I made it too complex and too "neat" and
   it really should be rewritten.  We don't need priorities really, one
   priority is enough.  This will simplify a lot the task system.

 o SIM support for SILC PKCS API needs to made so that they could be
   used as SIM's.  At the same time some work is required on prime
   generation as the way it is done now sucks.  Read from code for
   more (silcpkcs.h).

 o Random Number Generator needs some tweaking.  Reading /dev/random may
   block resulting slow initialization of RNG.  Some other things in the
   RNG may block as well.  Also, I have some pending changes to the RNG 
   that needs to be commited (from Schneier's Yarrow-160 paper).  They 
   should make the RNG even better.


TODO in the protocol before SILC 0.x
====================================

 o New commands and features in the commands
   (draft-riikonen-silc-spec-xx.txt):

	o Define GETKEY command to fetch the public key of a server
	  and/or a client in the SILC Network.
	o Define SENDKEY command to send your public key to a client
	  in the network.  Sending to the server must not be done due
	  to various security reasons (the server must not trust the
	  public keys blindly without third party verification; that's
	  why SENDKEY is not for servers).


TODO After 1.0
==============

 o Pthreads support.  A lot of problems are solved with server (and with
   client as well) if we add pthread support.  We can forget things such
   as non-blocking connecting etc, and we can do things such as DNS/IP
   lookups async.  The server itself also benefits great deal from 
   threads, especially from performance point of view.

   But, this is not a small task and almost entire SILC Library has to
   be made re-entrant.  Own API is probably added for the threads support
   to make changes in the future as painless as possible.  So the API 
   would have things like silc_mutex_lock, silc_mutex_unlock and 
   friends...

 o X.509 certificate support.  SILC protocol supports certificates and
   it would be great to have support for them.  This is a big task as
   support has to be made for ASN.1 as well.  I've looked into OpenSSL 
   package as it has X.509 certificate support (and ASN.1 as well).  
   The code does not look very good to my eye but it has some potentials.
   This should be looked at more closely.

   Naturally own SILC Certificate API has to be defined regardles what
   the actual X.509 library is (OpenSSL X.509 or something else).  Other
   choice is to write own X.509 library but I'm not going to do it - 
   I can help to migrate the OpenSSL X.509 into SILC and I can help if 
   someone would like to write the X.509 library - but I'm not going 
   to start writing one myself.  Anyhow, the OpenSSL X.509 lib should
   be checked.

 o SSH2 public keys support.  Maybe - not really needed but could be
   nice as SSH is widely used all over the place.  SILC Protocol 
   supports SSH2 public keys.

 o Cipher optimizations (asm, that this) at least for i386 would be nice.
