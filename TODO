TODO/bugs in Irssi SILC client
==============================

 o Do not let irssi update the status bar on JOIN until the join command
   is successful, so that it does not update that I'm on the channel
   even though I could not join the channel.

 o The CMODE notify handling in client library may return NULL
   client entry pointer to the application (when server was the CMODE's
   executor).  Fix this somehow.

 o Add PERL scripting support from Irssi CVS.

 o Add local commands to list the current server and client public keys
   that the user has.  And a local command to dump the contents of the
   public key to the screen.  Something like LISTKEYS, SHOWKEY...

 o We should get rid of the clientconfig.[ch] in Irssi SILC and move the
   cipher, hash, hmac and pkcs configuration to the Irssi SILC's config
   file.

 o Extend the /HELP command to support sub commands or something.  So
   that user can say /help set mutual_authentication they would get
   help of the mutual_authentication setting.

 o Set different kind of settings, like, /set mutual_authentication,
   /set key_exchange_timeout, /set conn_auth_timeout etc etc.


TODO/bugs In SILC Client Library
================================

 o Library should save the cumode and not start from 0 everytime then
   CUMODE is issued.  A mechanism of getting the channel entry for
   CMODE and CUMODE by the command reply identifier must be added.
   Otherwise saving the modes for the channels and channel user
   entries are impossible since server does not send Channel ID as
   command reply in these functions.

 o All protocol execution timeouts are hard coded. They should be 
   configurable and the Irssi SILC client should be able to set them
   with for example /set key_exchange_timeout etc.  The silc_client_alloc
   should take a Params structure or something as argument.

 o silc_client_close_connection leaks memory.  Read the XXX from code.

 o The client library must manage somehow when receiving client that has
   same nickname, same server, same username but different Client ID than
   what we have in the cache.  It is now assumed that they are different
   client but it might not be.  It should at least number the clients
   using the client->num so that they can be accessed from the user
   interface separately or it could just remove the old client unless
   it is on some channels.


TODO/bugs In SILC Server
========================

 o Incomplete IPv6 support:

 	o silc_server_get_users_on_channel does not support IPv6 based
	  Client ID's.
 	o silc_server_route_get and the route code in general supports
	  only IPv4.
	o silcd/serverid.c and its routines supports only IPv4.

 o DNS/IP lookup blocks the server.  This must be fixed.  Check the
   resolver stuff (resolver(3), resolver(5)).  Either we have to do the
   own resolver stuff (through scheduler, if possible without writing
   too much own stuff) or use threads.

 o The backup router support described in the protocol specification
   should be done at some point.

 o New configuration file format must be added.  The new one will be
   done using the dotconf config library (lib/dotconf).  The following
   tasks relates closely to this as well and must be done at the same time
   when adding the new config file format:

	o Server says that it is able to listen on multiple ports but
	  currently that is bogus.  It can, but internals are for single
	  server.

 	o Protocol execution timeouts are hard coded, should be
	  configurable.

 	o IP address fields in configuration file should accept mask
	  format as well, IP/MASK, and not just plain IP.

	 o Connection classes should be actually implemented in
	  serverconfig.c.  They can be defined but they are totally
	  ignored currently.  And they should be redefined also.


TODO/bugs In SILC Libraries
===========================

 o Incomplete IPv6 support:

	o All network routines in lib/silcutil/silcnet.[ch] does not
	  support IPv6.
	o silc_id_render supports only IPv4 based ID's in the file
	  lib/silcutil/silcutil.c.

 o Compression routines are missing.  The protocol supports packet
   compression thus it must be implemented.  SILC Comp API must be
   defined.  zlib package is already included into the lib dir (in CVS,
   not in distribution), but it is not used yet, and it requires some
   tweaking on the Makefiles (we want static lib not shared).

 o All payload parsing (decoding) functions should take unsigned char *
   and uint32 as data and data length as arguments.  Now some of the
   routines do already that but most of the routines use SilcBuffer.
   The SilcBuffer ones should be removed since buf->data and buf->len
   is more convenient to use.  However, the silc_buffer_[un]format
   routines support only SilcBuffer so they would require reallocation
   of SilcBuffer.  Maybe support for raw data (and not just SilcBuffer)
   should be added silc_buffer_[un]format_? routines.  These are currently
   only cosmetic changes but at some point must be done to make the
   payload interfaces consistent.

 o Add builtin SOCKS and HTTP Proxy support, well the SOCKS at least.
   SILC currently supports SOCKS4 and SOCKS5 but it needs to be compiled
   in separately.


TODO In SILC Protocol
=====================

 o pp-03 draft:

	o Add SILC_MESSAGE_FLAG_SIGNED flag that indicates that the
	  messages is signed with the senders private key and thus can
	  be verified with its public key.  This is especially handy
	  feature when sending privat messages without having negotiated
	  private keys, thus the servers decrypts and re-ecnrypts the
	  messages.  Other applications exists as well.

 o If channel founder mode is set and the invite mode is set on channel
   then the founder should be added to the list automatically so that
   if the founder signoff's it will be able join again to the invite only
   channel wihtout being invited.


TODO After 1.0
==============

 o Pthreads support.  A lot of problems are solved with server (and with
   client as well) if we add pthread support.  We can forget things such
   as non-blocking connecting etc, and we can do things such as DNS/IP
   lookups async.  The server itself also benefits great deal from 
   threads, especially from performance point of view.

   But, this is not a small task and almost entire SILC Library has to
   be made re-entrant.  Own API is probably added for the threads support
   to make changes in the future as painless as possible.  So the API 
   would have things like silc_mutex_lock, silc_mutex_unlock and 
   friends...

 o X.509 certificate support.  SILC protocol supports certificates and
   it would be great to have support for them.  This is a big task as
   support has to be made for ASN.1 as well.  I've looked into OpenSSL 
   package as it has X.509 certificate support (and ASN.1 as well).  
   The code does not look very good to my eye but it has some potentials.
   This should be looked at more closely.

   Naturally own SILC Certificate API has to be defined regardles what
   the actual X.509 library is (OpenSSL X.509 or something else).  Other
   choice is to write own X.509 library but I'm not going to do it - 
   I can help to migrate the OpenSSL X.509 into SILC and I can help if 
   someone would like to write the X.509 library - but I'm not going 
   to start writing one myself.  Anyhow, the OpenSSL X.509 lib should
   be checked.

   Other package that should be checked is the NSS's X509 library.

 o SSH2 public keys support.  Maybe - not really needed but could be
   nice as SSH is widely used all over the place.  SILC Protocol 
   supports SSH2 public keys.

 o Cipher optimizations (asm, that this) at least for i386 would be nice.
