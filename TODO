TODO/bugs in Irssi SILC client
==============================

 o Add local command to switch the channel's private key when channel has
   several private keys.  Currently sending channel messages with many
   keys is not possible because changing the key is not possible by the
   user.

 o JOINing to +a (requires passphrase to JOIN) does not work on autojoin.
   Seems the passwords in the .silc/config has no effect.

 o Add local commands to list the current server and client public keys
   that the user has.  And a local command to dump the contents of the
   public key to the screen.  Something like LISTKEYS, SHOWKEY...

 o The JOIN command's HELP is generated from Irssi IRCs JOIN help and
   the syntax is not same in SILC.  This must be fixed.  Most likely
   we must forget the Irssi's JOIN command and mimic it to get our
   required syntax for it too.

 o We should get rid of the clientconfig.[ch] in Irssi SILC and move the
   cipher, hash, hmac and pkcs configuration to the Irssi SILC's config
   file.

 o Add PERL scripting support from Irssi CVS.

 o Extend the /HELP command to support sub commands or something.  So
   that user can say /help set mutual_authentication they would get
   help of the mutual_authentication setting.

 o Set different kind of settings, like, /set mutual_authentication,
   /set key_exchange_timeout, /set conn_auth_timeout etc etc.


TODO/bugs In SILC Client Library
================================

 o JOIN command's argument handling is buggy.  See the XXX in the code.


TODO/bugs In SILC Server
========================

 o XXXXXXXXX cannot join +a channel from other servers

 o Implement the <founder auth> and founder privileges gaining to
   the JOIN command.  This will bypass invite-only mode as well for
   the client who got the founder mode during JOIN.

 o Optimize the WHOIS and IDENTIFY commands to check if the request
   includes an ID or multiple IDs, then they are checked from local cache
   first, and not sent directly to router.  This is because if they
   are found in the local cache there's no need to send them to the
   router.  Only if some ID is not found, or an found entry is 
   incomplete it can be queried from the router.  This way these
   commands become faster, and for example JOIN command becomes a lot
   faster since the server ends up resolving the same information only
   once, as opposed to resolve it everytime JOIN command is issued, like
   it does now.

   The same thing can be done with WHOWAS command as well.

   It is important to send these requests to router only if they can be
   expanded to many results (as when doing WHOIS for nickname).  If
   they are explicit (like requesting by ID) the local cache MUST be
   searched before sending it to router.

 o Announcements are incomplete: channel topics are not announced,
   user modes (UMODE) are not announced.

 o Change the server to connect to another server from low ports (706)
   and not from high ports.  Currently we cannot do incoming connection
   checking by remote port because the port is not fixed.

 o Backup router related issues

	o After backup resume protocol the TOPIC_SET was not handled
	  correctly by all (unknown Channel ID).

 	o Channel user mode changes are notified unnecessarely when
	  switching to backup router on router crash.

 o If client's public key is saved in the server (and doing public key
   authentication) then the hostname and the username information could
   be taken from the public key.  Should be a configuration option!

 o Add a timeout to handling incoming JOIN commands.  It should be 
   enforced that JOIN command is executed only once in a second or two
   seconds.  Now it is possible to accept n incoming JOIN commands
   and process them without any timeouts.  THis must be employed because
   each JOIN command will create and distribute the new channel key
   to everybody on the channel.

 o New configuration file format must be added.  The new one will be
   done using the dotconf config library (lib/dotconf).  The following
   tasks relates closely to this as well and must be done at the same time
   when adding the new config file format:

	o Server says that it is able to listen on multiple ports but
	  currently that is bogus.  It can, but internals are for single
	  server.

 	o Protocol execution timeouts are hard coded, should be
	  configurable.

 	o IP address fields in configuration file should accept mask
	  format as well, IP/MASK, and not just plain IP.

	o Connection classes should be actually implemented in
	  serverconfig.c.  They can be defined but they are totally
	  ignored currently.  And they should be redefined also.


TODO/bugs In SILC Libraries
===========================

 o WIN32 silc_net_create_connection_async does not work the same way
   than on Unix.  Do it with threads on WIN32.  The function works but
   is not actually async currently.


TODO After 1.0
==============

 o Compression routines are missing.  The protocol supports packet
   compression thus it must be implemented.  SILC Zip API must be
   defined.  zlib package is already included into the lib dir (in CVS,
   not in distribution), but it is not used yet, and it requires some
   tweaking on the Makefiles (we want static lib not shared).

 o Implement the defined SilcDH API.  The definition is in
   lib/silccrypt/silcdh.h.

 o Add builtin SOCKS and HTTP Proxy support, well the SOCKS at least.
   SILC currently supports SOCKS4 and SOCKS5 but it needs to be compiled
   in separately.

 o X.509 certificate support.  SILC protocol supports certificates and
   it would be great to have support for them.  This is a big task as
   support has to be made for ASN.1 as well.  I've looked into OpenSSL 
   package as it has X.509 certificate support (and ASN.1 as well).  
   The code does not look very good to my eye but it has some potentials.
   This should be looked at more closely.

   Naturally own SILC Certificate API has to be defined regardles what
   the actual X.509 library is (OpenSSL X.509 or something else).  Other
   choice is to write own X.509 library but I'm not going to do it - 
   I can help to migrate the OpenSSL X.509 into SILC and I can help if 
   someone would like to write the X.509 library - but I'm not going 
   to start writing one myself.  Anyhow, the OpenSSL X.509 lib should
   be checked.

   Other package that should be checked is the NSS's X509 library,
   which I like more over OpenSSL package.

 o SSH2 public keys support.

 o OpenPGP certificate support.

 o Cipher optimizations (asm, that this) at least for i386 would be nice.
