TODO/bugs In SILC Client Library
================================

 o Client library crashes if for example server timeouts protocol
   execution and disconnects the client.  The client, on the other hand
   may still assume that the connection is active, even after receiving
   the EOF.  Reason for this is that the clien library does not handle
   the SilcSocketConnection reference counter at all.  This must be
   fixed.

 o When receiving client's public key with GETKEY or in key agreement
   protoocl it probably should be saved using the nickname and the real
   name of the client instead of the host name of the client.

 o Add client library parameters or options that handle what kind of
   messages the library should print out (using `say' client operation,
   for example) and what is left for the application to print.  The
   appliation could for example set that it handles all command printing
   but all error printing should be handled by the library, etc...
   This is not a showstopper.

 o Input line on UI is buggy.  Cursor movement etc bugs.  Too lazy to
   fix it.


TODO/bugs In SILC Server
========================

 o Send SILC_NOTIFY_TYPE_CUMODE_CHANGE when received announced channels
   and channel users and we (router) already has a channel founder on the
   channel.

 o When server quits and all clients of that server are removed from all
   channels the channel keys are re-generated for all clients.  This is
   a bug and should be done only once per channel after all clients of
   the server has been removed.

 o DNS/IP lookup blocks the server.  This must be fixed.  Check the
   resolver stuff (resolver(3), resolver(5)).  Either we have to do the
   own resolver stuff (through scheduler, if possible without writing
   too much own stuff) or use threads.

 o The ID List must be optimized.  When the lists grow the searching
   becomes a lot slower and is some cases the lists are searched many
   times, like with channel messages (twice at least).  Some sort of
   hash tables should replace the lists.  Thus, the ID cache should be
   rewritten to use hash tables internally.

 o The backup router support described in the protocol specification
   should be done at some point.

 o Server says that it is able to listen on multiple ports but currently
   that is bogus.  It can, but internals are for single server.

 o Protocol execution timeouts are hard coded, should be configurable.

 o IP address fields in configuration file should accept mask format
   as well, IP/MASK, and not just plain IP.

 o Connection classes should be actually implemented in serverconfig.c.
   They can be defined but they are totally ignored currently.  And they
   should be redefined also.


TODO/bugs In SILC Libraries
===========================

 o Remove the static lists from SILC ciphers, PKCS and hash functions
   in the crypto library.  The currently acceptable code is used in the
   HMAC library, look from there.  The config file must decide the order
   of the algorithms, not the static lists, as they are doing now.
   Actually the way to do this is to keep the static lists, but register
   the algorithms to the dynamic list and make the alloc routines to 
   check only the dynamic list.  Also, replace the lists used by these 
   routines with SilcList.  Also, for applications it might be nice
   to export a function that registers default algorithms, if application
   does not want to register them one by one (if for example SILC client
   is run without config files at all).

 o Compression routines are missing.  The protocol supports packet
   compression thus it must be implemented.  SILC Comp API must be
   defined.  zlib package is already included into the lib dir (in CVS,
   not in distribution), but it is not used yet, and it requires some
   tweaking on the Makefiles (we want static lib not shared).

 o Some of the ciphers in lib/silccrypt does not implement the SILC
   Crypto API correctly.

 o IPv6 support for ID's and into the code.

 o SIM support for SILC PKCS API needs to made so that they could be
   used as SIM's.  At the same time some work is required on prime
   generation as the way it is done now sucks.  Read from code for
   more (silcpkcs.h).


TODO After 1.0
==============

 o Pthreads support.  A lot of problems are solved with server (and with
   client as well) if we add pthread support.  We can forget things such
   as non-blocking connecting etc, and we can do things such as DNS/IP
   lookups async.  The server itself also benefits great deal from 
   threads, especially from performance point of view.

   But, this is not a small task and almost entire SILC Library has to
   be made re-entrant.  Own API is probably added for the threads support
   to make changes in the future as painless as possible.  So the API 
   would have things like silc_mutex_lock, silc_mutex_unlock and 
   friends...

 o X.509 certificate support.  SILC protocol supports certificates and
   it would be great to have support for them.  This is a big task as
   support has to be made for ASN.1 as well.  I've looked into OpenSSL 
   package as it has X.509 certificate support (and ASN.1 as well).  
   The code does not look very good to my eye but it has some potentials.
   This should be looked at more closely.

   Naturally own SILC Certificate API has to be defined regardles what
   the actual X.509 library is (OpenSSL X.509 or something else).  Other
   choice is to write own X.509 library but I'm not going to do it - 
   I can help to migrate the OpenSSL X.509 into SILC and I can help if 
   someone would like to write the X.509 library - but I'm not going 
   to start writing one myself.  Anyhow, the OpenSSL X.509 lib should
   be checked.

 o SSH2 public keys support.  Maybe - not really needed but could be
   nice as SSH is widely used all over the place.  SILC Protocol 
   supports SSH2 public keys.

 o Cipher optimizations (asm, that this) at least for i386 would be nice.
