TODO/bugs in Irssi SILC client
==============================

 o Fix the silc_channels_join to parse the command like, with fe.
   silc_parse_command_line, because currently it ignores all options,
   including passphrase which makes autojoin impossible to +a channels.
   Other important options are ignored too.

 o Add local command to switch the channel's private key when channel has
   several private keys.  Currently sending channel messages with many
   keys is not possible because changing the key is not possible by the
   user.

 o /cumode for unknown nick does not give any error message.


TODO/bugs In SILC Client Library
================================

 o The PRIVATE_MESSAGE_KEY packet is not handled (it is implemented 
   though).  This should be added and perhaps new client operation
   should be added to notify application that it was received and
   set the key only if application wishes to set (accept the key) it.

 o Additions to do after protocol version 1.1:

	o Fix the NICK_CHANGE notify handling not to create new entry
	  for the changed client, but take the nickname from the notify
	  (removes need for resolving as well).  Protocol TODO entry 3.

	o Add support for list of errors in command replies.  Protocol
	  TODO entry 1.


TODO/bugs In SILC Server
========================

 o Configuration file additions:

	o Add version handling, to allow, disallow certain versions to
	  connect.

	o Add incoming connection frequency, incoming connection frequency
	  for single IP address, key exchange frequency, key exchange
	  frequency for single IP. Add also frequency base.

	o Add hashed passwords to config file.

	o Add rehashing support.

 o If server send CUMODE_CHANGE notify (like setting founder) to router
   and router does not have founder on channel (founder is left or there's
   no founder on channel at all), the router will accept the server's
   founder mode change, even though it perhaps should not do that.

 o The router should check for validity of received notify packets from
   servers (after all buggy servers may send notify that is actually
   something that should have not been sent).

 o Add a timeout to handling incoming JOIN commands.  It should be 
   enforced that JOIN command is executed only once in a second or two
   seconds.  Now it is possible to accept n incoming JOIN commands
   and process them without any timeouts.  THis must be employed because
   each JOIN command will create and distribute the new channel key
   to everybody on the channel.

 o Backup router related issues

 	o Channel user mode changes are notified unnecessarely when
	  switching to backup router on router crash.

 o Lots of statistics updating is missing around the server.

 o If client's public key is saved in the server (and doing public key
   authentication) then the hostname and the username information could
   be taken from the public key.  Should be a configuration option!


TODO/bugs In SILC Libraries
===========================

 o Fix possible buffer overflows in silc_id_render function.

 o WIN32 silc_net_create_connection_async does not work the same way
   than on Unix.  Do it with threads on WIN32.  The function works but
   is not actually async currently.

 o Rewrite the lib/silcsim/silcsim.h.  The SilcSimContext should be
   private and silc_sim_alloc should take necessary arguments.

 o SILC RNG does not implement random seed files, and they should be
   implemented.

 o The SilcSocketConnection in the SFTP interface is actually redundant
   and should perhaps be removed.  The application can save it in the
   context it provides, which is delivered by SFTP libary to all 
   callback functions.

 o EPOC specific additions/changes required:

	o lib/silcutil/epoc routines missing or not completed.

 	o Rewrite the lib/silcutil/silcprotocol.[ch] not to have 
	  [un]register functions, but to make it context based all the 
	  way.  The alloc should take as argument the protocol type and 
	  its callback (not only final callback).  It is not good that we 
	  have now global list of registered protocols.

	o Global RNG should not be allowed on EPOC, since it won't
	  work.  Every function in library that calls the global RNG must
	  also take the RNG context as argument so that application can
	  provide it if it doesn't want to use global RNG.

	o Think some solution to the global crypto lists in lib/silccrypt.
	  They won't work on EPOC.

	o Something needs to be thought to the logging globals as well, 
	  like silc_debug etc.  They won't work on EPOC.  Perhaps logging
	  and debugging is to be disabled on EPOC.


TODO in Toolkit Documentation
=============================

Stuff that needs to be done in order to complete the Tooolkit Reference
Manual.

 o Lots of ROBOdoc header formatting is undone in lib/silcutil, and 
   lib/silccrypt.

 o Write "Programming with Toolkit" document, describing how to build
   Toolkit, how the build system works, where is everything, how
   new (external) projects can be glued into Toolkit (use irssi as an
   example), and how external projects can use Toolkit without gluing into
   it (how to link etc), debugging, architecture, types, etc.

 o Write "Platform Implementations" document to describe what platforms
   Toolkit support, what has been implemented, what has not been, what
   wors differently etc.


TODO in SILC Protocol
=====================

Current protocol version is 1.0.  However, it is far from being perfect,
and needs to include additional features.  Following protocol TODO entries
describe new stuff to be added to protocol versions 1.x.

 1. Re-define the Status Payload: it is now 16 bits, split it into two
    8 bits fields.  First field includes status types from 0 - 9 and
    10 - n *if* it is not an list of errors.  If it is list of errors then
    the first field includes 1, 2 and/or 3, and the second field includes
    the error status 10 - n.  This way it is possible to send multiple
    errors (list of errors) and we have a way to tell the receiver that
    there will be other errors as well.  The second field is used only
    if there is list of errors.  If normal status, or normal (single)
    error status the second field is set to zero, and must be ignored.
    Hence, the status works same way as now except for list of errors.
    To be included in protocol version 1.1.

 2. Define that WHOIS and IDENTIFY commands must send list of errors
    if multiple Client ID (or Channel ID and Server ID for IDENTIFY) was
    requested and was not found.  Each unfound entry must cause an error
    command reply to the sender.  Also define that errors must be sent
    *after* sending successfully found entries (this way receiver may
    ignore them).  To be included in protocol version 1.1.

 3. Define the NICK_CHANGE notify to send the changed nickname as a new
    third argument.  This will make the NICK_CHANGE notify handling easier
    in the receiver's end (client primarily) since it removes the
    requirement that receiver must resolve (using IDENTIFY or WHOIS) the
    new Client ID received in the notify (because of the new nickname is
    unknown).  To be included in protocol version 1.1.

 4. Add "request parameters" or similar to the WHOIS command, which can
    be used to request various parameters (something not returned by
    standard WHOIS command) about clients (info that could be fetched
    even from clients).  Additional specification (or appendix) should 
    be done to define the payload and the parameters.  It could be used
    to make the WHOIS command support various search conditions as well.
    This would be the way to extend the WHOIS command to support various
    new features without always making the command incompatible to previous
    version.  To be included in protocol version 1.1.

 5. Inviting and banning by public key should be made possible.  To be
    included in protocol version 1.x.

 6. Add perhaps SILENCE_USERS, SILENCE_OPERS channel user modes which
    can be used to silence (moderate) normal users and opers (this set
    only by founder).  To be included in protocol version 1.1.

 7. Channel Message Payload needs slight redesining to include the IV
    field to the MAC generation of the payload.  It is authenticated
    by the packet's MAC but not by the payload's MAC.  Since the IV
    belongs to the payload, its integrity should be protected by the
    payload MAC and not alone by packet MAC.  To be included in protocol 
    version 1.1.

 8. Remove the administrative commands from the protocol all together.
    It does not make sense for the protocol to define how a server is
    reconnected or shutdown, since they are implementation and 
    configuration issues.  Besides protocol provides only limited set of
    administrative commands and cannot define all that one could imagine.
    To be included in protocol version 1.1.

 9. Add SILC_MESAGE_FLAG_REPLY for being other side to the
    SILC_MESSAGE_FLAG_REQUEST.  Add generic SILC_MESSAGE_FLAG_DATA, which
    can include generic payload, which can include generic data.  The
    payload definition is left out for now.  To be included in protocol
    version 1.1.

 10. Check command reply error status types in various commands,
     specifically NO_FOPRIV is missing from many commands.  To be 
     included in protocol version 1.1.

 11. Change the wording in Private Message Key Payload definition to
     describe the problems of trusting the payload, and to indicate that
     the receiver may not accept the key in the payload, and to describe
     other means of distributing a key.

 12. The router to router connection diagram in spec-xx is showing the
     primary routers direction to wrong direction.  Swap it.
