TODO/bugs In SILC Client Library
================================

 o Add local commands to list the current server and client public keys
   that the user has.  And a local command to dump the contents of the
   public key to the screen.

 o Add client library parameters or options that handle what kind of
   messages the library should print out (using `say' client operation,
   for example) and what is left for the application to print.  The
   appliation could for example set that it handles all command printing
   but all error printing should be handled by the library, etc...
   This is not a showstopper.

 o Input line on UI is buggy.  Cursor movement etc bugs.  Too lazy to
   fix it.


TODO/bugs In SILC Server
========================

 o When server quits and all clients of that server are removed from all
   channels the channel keys are re-generated for all clients.  This is
   a bug and should be done only once per channel after all clients of
   the server has been removed.

 o Incomplete IPv6 support:

 	o silc_server_get_users_on_channel does not support IPv6 based
	  Client ID's.
 	o silc_server_route_get and the route code in general supports
	  only IPv4.
	o silcd/serverid.c and its routines supports only IPv4.

 o DNS/IP lookup blocks the server.  This must be fixed.  Check the
   resolver stuff (resolver(3), resolver(5)).  Either we have to do the
   own resolver stuff (through scheduler, if possible without writing
   too much own stuff) or use threads.

 o The ID List must be optimized.  When the lists grow the searching
   becomes a lot slower and is some cases the lists are searched many
   times, like with channel messages (twice at least).  Some sort of
   hash tables should replace the lists.  Thus, the ID cache should be
   rewritten to use hash tables internally.

 o The backup router support described in the protocol specification
   should be done at some point.

 o New configuration file format must be added.  The new one will be
   done using the dotconf config library (lib/dotconf).  The following
   tasks relates closely to this as well and must be done at the same time
   when adding the new config file format:

	o Server says that it is able to listen on multiple ports but
	  currently that is bogus.  It can, but internals are for single
	  server.

 	o Protocol execution timeouts are hard coded, should be
	  configurable.

 	o IP address fields in configuration file should accept mask
	  format as well, IP/MASK, and not just plain IP.

	 o Connection classes should be actually implemented in
	  serverconfig.c.  They can be defined but they are totally
	  ignored currently.  And they should be redefined also.


TODO/bugs In SILC Libraries
===========================

 o Incomplete IPv6 support:

	o All network routines in lib/silcutil/silcnet.[ch] does not
	  support IPv6.
	o silc_id_render supports only IPv4 based ID's in the file
	  lib/silcutil/silcutil.c.

 o Hash tables must be implemented.  The requirement for this is that
   the hash table is collision resistant so that it can be used in 
   critical positions as well.  It probably works the 95% of the time
   fine without collisions but the last 5% of the cases must be
   handled.  Maybe two interfaces could be done, one for normal static
   hash tables and one for collision resistant hash table.

 o All the ID Cache routines has not been implemented in
   lib/silccore/idcache.c.

 o Compression routines are missing.  The protocol supports packet
   compression thus it must be implemented.  SILC Comp API must be
   defined.  zlib package is already included into the lib dir (in CVS,
   not in distribution), but it is not used yet, and it requires some
   tweaking on the Makefiles (we want static lib not shared).

 o The CAST cipher is not compiled currently due to compilation errors;
   check those.  Cast is in lib/silccrypt/cast.c.


TODO After 1.0
==============

 o Pthreads support.  A lot of problems are solved with server (and with
   client as well) if we add pthread support.  We can forget things such
   as non-blocking connecting etc, and we can do things such as DNS/IP
   lookups async.  The server itself also benefits great deal from 
   threads, especially from performance point of view.

   But, this is not a small task and almost entire SILC Library has to
   be made re-entrant.  Own API is probably added for the threads support
   to make changes in the future as painless as possible.  So the API 
   would have things like silc_mutex_lock, silc_mutex_unlock and 
   friends...

 o X.509 certificate support.  SILC protocol supports certificates and
   it would be great to have support for them.  This is a big task as
   support has to be made for ASN.1 as well.  I've looked into OpenSSL 
   package as it has X.509 certificate support (and ASN.1 as well).  
   The code does not look very good to my eye but it has some potentials.
   This should be looked at more closely.

   Naturally own SILC Certificate API has to be defined regardles what
   the actual X.509 library is (OpenSSL X.509 or something else).  Other
   choice is to write own X.509 library but I'm not going to do it - 
   I can help to migrate the OpenSSL X.509 into SILC and I can help if 
   someone would like to write the X.509 library - but I'm not going 
   to start writing one myself.  Anyhow, the OpenSSL X.509 lib should
   be checked.

 o SSH2 public keys support.  Maybe - not really needed but could be
   nice as SSH is widely used all over the place.  SILC Protocol 
   supports SSH2 public keys.

 o Cipher optimizations (asm, that this) at least for i386 would be nice.
