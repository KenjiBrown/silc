#
#  configure.ad
#
#  Author: Pekka Riikonen <priikone@silcnet.org>
#
#  Copyright (C) 2000 - 2008 Pekka Riikonen
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2 of the License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#

AD_INIT
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE
AC_PREREQ(2.52)
AC_CONFIG_HEADERS(silcdefs.h)

AC_PROG_INSTALL
AC_PROG_MAKE_SET

AC_PROG_LN_S
AC_PROG_EGREP
AC_SUBST(LN_S)
AC_PATH_PROG(sedpath, sed)

AC_PROG_CC
AM_PROG_AS
AC_C_INLINE
AC_C_CONST

AC_PROG_RANLIB
#ifndef SILC_DIST_TOOLKIT
AC_DISABLE_SHARED
#endif SILC_DIST_TOOLKIT
#ifdef SILC_DIST_INPLACE
AC_DISABLE_SHARED
#endif SILC_DIST_INPLACE
AC_PROG_LIBTOOL

SILC_TOP_SRCDIR=`pwd`


##
## Library versioning.
##

# Do the releases and library versioning according to following rules:
#
#  - If any code has changed in library, increment [LIB]_REVISION
#  - If functions were added, removed or changed, set [LIB]_REVISION to 0
#  - If functions were added, removed or changed, increment [LIB]_CURRENT
#  - If functions were added, increment [LIB]_AGE
#  - If functions were removed, set [LIB]_AGE to 0
#
# where [LIB] is LIBSILC, LIBSILCCLIENT or LIBSILCSERVER, and where
# "functions" means functions public interfaces (API).
#
# The LIB_BASE_VERSION defines the SILC software major.minor version and
# it is increment only when these version numbers actually change.
#

# Base version for libraries.  Do not change this unless SILC version
# changes too.
LIB_BASE_VERSION=1.2

# libsilc versions
LIBSILC_CURRENT=1		# prev = 0
LIBSILC_REVISION=0		# prev = 0
LIBSILC_AGE=0			# prev = 0

# libsilcclient versions
LIBSILCCLIENT_CURRENT=1		# prev = 0
LIBSILCCLIENT_REVISION=0	# prev = 0
LIBSILCCLIENT_AGE=0		# prev = 0

# libsilcserver versions
LIBSILCSERVER_CURRENT=1		# prev = 0
LIBSILCSERVER_REVISION=0	# prev = 0
LIBSILCSERVER_AGE=0		# prev = 0

# Substitute the version numbers
AC_SUBST(LIB_BASE_VERSION)
AC_SUBST(LIBSILC_CURRENT)
AC_SUBST(LIBSILC_REVISION)
AC_SUBST(LIBSILC_AGE)
AC_SUBST(LIBSILCCLIENT_CURRENT)
AC_SUBST(LIBSILCCLIENT_REVISION)
AC_SUBST(LIBSILCCLIENT_AGE)
AC_SUBST(LIBSILCSERVER_CURRENT)
AC_SUBST(LIBSILCSERVER_REVISION)
AC_SUBST(LIBSILCSERVER_AGE)


##
##  Installation
##

# Default installation destination
AC_PREFIX_DEFAULT(/usr/local)
if test "x$prefix" != xNONE; then
  silc_prefix="$prefix"
else
  silc_prefix="$ac_default_prefix"
  prefix="$silc_prefix"
fi

#ifdef SILC_DIST_TOOLKIT
toolkitver=`echo $VERSION | sed 's/\./ /g'`
maj=0
min=0
bld=0
for v in $toolkitver
do
  if test $maj -eq 0; then
    maj=$v
    continue
  fi
  if test $min -eq 0; then
    min=$v
    continue
  fi
  if test $bld -eq 0; then
    bld=$v
    continue
  fi
done
__SILC_PACKAGE_VERSION="#define __SILC_TOOLKIT_VERSION SILC_VERSION($maj,$min,$bld)"
#endif SILC_DIST_TOOLKIT


##
## Required dependencies
##

compile_libs=true
LIBSUBDIR=lib
LDFLAGS="-L\$(silc_top_srcdir)/lib $LDFLAGS"

# SILC Runtime Toolkit checking
AC_ARG_WITH(srt-includes,
  [  --with-srt-includes=DIR  SILC Runtime Toolkit includes [search in DIR]],
  [ac_srt_includes="$withval"], [ac_srt_includes="no"])
AC_ARG_WITH(srt-libs,
  [  --with-srt-libs=DIR      SILC Runtime Toolkit libraries [search in DIR]],
  [ac_srt_libs="$withval"], [ac_srt_libs="no"])

if test -n "$with_srt_includes" || test -n "$with_srt_libs"; then
  # Manually provided libs
  if test "$ac_srt_includes" != "no"; then
    SILC_LIB_INCLUDES="-I$ac_srt_includes"
  fi
  if test "$ac_srt_libs" != "no"; then
    LDFLAGS="-L$ac_srt_libs $LDFLAGS"
  fi

  # Check libs to link against
  f=`$EGREP __SILC_HAVE_PTHREAD $ac_srt_includes/silc.h`
  if test -n "$f"; then
    LIBS="$LIBS -lpthread"
    has_threads=true
  fi
else
  # pkg-config check
  PKG_CHECK_MODULES(SRT, [srt >= 1.2])
  LIBS="$SRT_LIBS $LIBS"
  CFLAGS="$CFLAGS $SRT_CFLAGS"
fi

# SILC Crypto Toolkit checking
AC_ARG_WITH(sct-includes,
  [  --with-sct-includes=DIR  SILC Crypto Toolkit includes [search in DIR]],
  [ac_sct_includes="$withval"], [ac_sct_includes="no"])
AC_ARG_WITH(sct-libs,
  [  --with-sct-libs=DIR      SILC Crypto Toolkit libraries [search in DIR]],
  [ac_sct_libs="$withval"], [ac_sct_libs="no"])

if test -n "$with_sct_includes" || test -n "$with_sct_libs"; then
  # Manually provided libs
  if test "$ac_sct_includes" != "no"; then
    SILC_LIB_INCLUDES="-I$ac_sct_includes"
  fi
  if test "$ac_sct_libs" != "no"; then
    LDFLAGS="-L$ac_sct_libs $LDFLAGS"
  fi

  # Check libs to link against
  f=`$EGREP __SILC_HAVE_PTHREAD $ac_sct_includes/silc.h`
  if test -n "$f"; then
    LIBS="$LIBS -lpthread"
    has_threads=true
  fi
else
  # pkg-config check
  PKG_CHECK_MODULES(SCT, [sct >= 1.2])
  LIBS="$SCT_LIBS $LIBS"
  CFLAGS="$CFLAGS $SCT_CFLAGS"
fi


##
## Detect CPU
##

# Disable all CPU feature optimizations
AC_MSG_CHECKING(whether to enable CPU feature optimizations)
AC_ARG_ENABLE(cpu-optimizations,
  [  --disable-cpu-optimizations  do not use any CPU feature optimizations],
  [
    AC_MSG_RESULT(no)
    AC_DEFINE([SILC_NO_CPU_OPTIMIZATIONS], [], [SILC_NO_CPU_OPTIMIZATIONS])
    want_cpu_optimizations=false
  ],
  [
    AC_MSG_RESULT(yes)
    want_cpu_optimizations=true
  ])
AM_CONDITIONAL(SILC_NO_CPU_OPTIMIZATIONS,
               test x$want_cpu_optimizations = xfalse)

SILC_SYSTEM_IS_SMP(AC_DEFINE([SILC_SMP], [], [SILC_SMP]), [],
                   AC_DEFINE([SILC_SMP], [], [SILC_SMP]))
cpu_i386=false
cpu_i486=false
cpu_i586=false
cpu_i686=false
cpu_i786=false
cpu_x86_64=false
cpu_ppc=false
cpu_ia64=false
case "$host_cpu" in
  # All following Intels are considered 32-bit CPUs.
  i?86)
    # All CPUs of today are considered i386 and i486 compatible */
    cpu_i386=true
    cpu_i486=true

    if test "x$host_cpu" = "xi586"; then
      cpu_i586=true
    fi

    if test "x$host_cpu" = "xi686"; then
      cpu_i586=true
      cpu_i686=true
    fi

    if test "x$host_cpu" = "xi786"; then
      cpu_i586=true
      cpu_i686=true
      cpu_i786=true
    fi

    # Check for specific CPU features
    SILC_CPU_FLAG(mmx, true, AC_DEFINE([SILC_CPU_MMX], [], [SILC_CPU_MMX]), [])
    SILC_CPU_FLAG(sse2, true, AC_DEFINE([SILC_CPU_SSE2], [], [SILC_CPU_SSE2]), [])
    SILC_CPU_FLAG(pni, true, AC_DEFINE([SILC_CPU_SSE3], [], [SILC_CPU_SSE3]), [])
    SILC_CPU_FLAG(ssse3, true, AC_DEFINE([SILC_CPU_SSSE3], [], [SILC_CPU_SSSE3]), [])
    SILC_CPU_FLAG(sse4, true, AC_DEFINE([SILC_CPU_SSE4], [], [SILC_CPU_SSE4]), [])
    ;;

  # Intel IA-64, 64-bit CPU (not x86_64 compatible)
  ia64)
    AC_DEFINE([SILC_IA64], [], [SILC_IA64])
    cpu_ia64=true
    ;;

  # AMD/Intel x86_64, 64-bit CPU
  x86_64)
    cpu_x86_64=true

    # Check for specific CPU features
    SILC_CPU_FLAG(mmx, true, AC_DEFINE([SILC_CPU_MMX], [], [SILC_CPU_MMX]), [])
    SILC_CPU_FLAG(sse2, true, AC_DEFINE([SILC_CPU_SSE2], [], [SILC_CPU_SSE2]), [])
    SILC_CPU_FLAG(pni, true, AC_DEFINE([SILC_CPU_SSE3], [], [SILC_CPU_SSE3]), [])
    SILC_CPU_FLAG(ssse3, true, AC_DEFINE([SILC_CPU_SSSE3], [], [SILC_CPU_SSSE3]), [])
    SILC_CPU_FLAG(sse4, true, AC_DEFINE([SILC_CPU_SSE4], [], [SILC_CPU_SSE4]), [])
    ;;

  # PowerPC, 32-bit and 64-bit CPUs
  powerpc*)
    cpu_ppc=true
    ;;
esac
AM_CONDITIONAL(SILC_I386, test x$cpu_i386 = xtrue)
AM_CONDITIONAL(SILC_I486, test x$cpu_i486 = xtrue)
AM_CONDITIONAL(SILC_I586, test x$cpu_i586 = xtrue)
AM_CONDITIONAL(SILC_I686, test x$cpu_i686 = xtrue)
AM_CONDITIONAL(SILC_7686, test x$cpu_i786 = xtrue)
AM_CONDITIONAL(SILC_X86_64, test x$cpu_x86_64 = xtrue)
AM_CONDITIONAL(SILC_POWERPC, test x$cpu_ppc = xtrue)
AM_CONDITIONAL(SILC_IA64, test x$cpu_ia64 = xtrue)

if test x$want_cpu_optimizations = xtrue; then
  # Set some compiler options based on CPU
  if test "x$CC" = "xicc"; then
    # ICC flags
    if test x$x_have_cpu_sse4 = xtrue; then
      SILC_ADD_CFLAGS(-axS)
    fi
    if test x$x_have_cpu_ssse3 = xtrue; then
      SILC_ADD_CFLAGS(-axT)
    elif test x$x_have_cpu_pni = xtrue; then
      SILC_ADD_CFLAGS(-axP)
    elif test x$x_have_cpu_sse2 = xtrue; then
      SILC_ADD_CFLAGS(-axW)
    fi
  else
    # Other compilers
    if test x$x_have_cpu_sse2 = xtrue; then
      SILC_ADD_CFLAGS(-msse2)
    fi
    if test x$x_have_cpu_pni = xtrue; then
      SILC_ADD_CFLAGS(-msse3)
    fi
    if test x$x_have_cpu_ssse3 = xtrue; then
      SILC_ADD_CFLAGS(-mssse3)
    fi
    if test x$x_have_cpu_sse4 = xtrue; then
      SILC_ADD_CFLAGS(-msse4)
    fi
  fi
fi


##
## Put here any platform specific stuff
##

case "$target" in
  *-*-linux*)
    CFLAGS=`echo $CFLAGS -D_GNU_SOURCE`
    ;;
  *-*-freebsd*)
    ;;
  *-*-netbsd*)
    ;;
  *-*-*bsd*)
    ;;
  *)
    ;;
esac


##
## Header checking
##
AC_HEADER_STDC

# More header checking
#
AC_CHECK_HEADERS(unistd.h assert.h time.h fcntl.h stdarg.h)
AC_CHECK_HEADERS(sys/types.h sys/times.h sys/time.h)

# Check for big-endian machines
AC_C_BIGENDIAN


##
## Compiler and compiler flag checks
##

# Disable all compiler optimizations
AC_MSG_CHECKING(whether to enable compiler optimizations)
AC_ARG_ENABLE(optimizations,
  [  --disable-optimizations do not use any compiler optimizations],
  [
    AC_MSG_RESULT(no)
    AC_DEFINE([SILC_NO_CC_OPTIMIZATIONS], [], [SILC_NO_CC_OPTIMIZATIONS])
    want_cc_optimizations=false
  ],
  [
    AC_MSG_RESULT(yes)
    want_cc_optimizations=true
  ])
AM_CONDITIONAL(SILC_NO_CC_OPTIMIZATIONS, test x$want_cc_optimizations = xfalse)

if test "$GCC"; then
  # GCC specific options
  if test "x$summary_debug" = "xyes"; then
    SILC_ADD_CFLAGS(-g)
  else
    SILC_ADD_CFLAGS(-g)
  fi
  SILC_ADD_CFLAGS(-Wall -finline-functions)
  SILC_ADD_CFLAGS(-Wno-pointer-sign)
else
  # Other compilers
  case "$target" in
    alpha*-dec-osf*)
      SILC_ADD_CFLAGS(-g3)
      ;;
    mips*-sgi-irix*)
      SILC_ADD_CFLAGS(-g3)
      ;;
    *)
      SILC_ADD_CFLAGS(-g)
      ;;
  esac

  # Intel C++ Compiler flags
  if test "x$CC" = "xicc"; then
    SILC_ADD_CFLAGS(-restrict)
    SILC_ADD_CFLAGS(-finline-functions)

    # Don't define __GNUC__ except for system includes
    SILC_ADD_CFLAGS(-gcc-sys)
  fi
fi

if test x$want_cc_optimizations = xtrue; then
  if test "$GCC"; then
    # GCC specific options
    if test "x$summary_debug" = "xyes"; then
      SILC_ADD_CFLAGS(-O)
    else
      SILC_ADD_CFLAGS(-O2)
    fi
  else
    # Other compilers
    case "$target" in
      alpha*-dec-osf*)
        SILC_ADD_CFLAGS(-O2, SILC_ADD_CFLAGS(-O))
        ;;
      mips*-sgi-irix*)
        SILC_ADD_CFLAGS(-O2, SILC_ADD_CFLAGS(-O))
        ;;
      *)
        SILC_ADD_CFLAGS(-O2, SILC_ADD_CFLAGS(-O))
        ;;
    esac
  fi
fi


##
## Function and libary checking
##


##
##  Enable/disable checking
##

#ifdef SILC_DIST_INPLACE
#
# Profiling options (never delivered to distributions)
#
AC_MSG_CHECKING(whether to enable gprof)
AC_ARG_ENABLE(gprof,
  [  --enable-gprof          enable gprof profiling],
  [
    case "${enableval}" in
      yes)
        AC_MSG_RESULT(yes)
        SILC_ADD_CFLAGS(-pg)
        LIBS="$LIBS -pg"
        ;;
      *)
        AC_MSG_RESULT(no)
        ;;
    esac
  ],
  [
    AC_MSG_RESULT(no)
  ])

AC_MSG_CHECKING(whether to enable gcov)
AC_ARG_ENABLE(gcov,
  [  --enable-gcov           enable gcov],
  [
    case "${enableval}" in
      yes)
        AC_MSG_RESULT(yes)
        SILC_ADD_CFLAGS(-fprofile-arcs)
        LIBS="$LIBS -lgcov"
        ;;
      *)
        AC_MSG_RESULT(no)
        ;;
    esac
  ],
  [
    AC_MSG_RESULT(no)
  ])
#endif SILC_DIST_INPLACE

# Debug checking
AC_MSG_CHECKING(whether to enable debugging)
summary_debug="no"
AC_ARG_ENABLE(debug,
  [  --enable-debug          enable debugging],
  [
    case "${enableval}" in
      yes)
        AC_MSG_RESULT(yes)
	summary_debug="yes"
        ;;
      *)
        AC_MSG_RESULT(no)
        ;;
    esac
  ],
  [
    AC_MSG_RESULT(no)
  ])

# Disable all assembler optimizations
AC_MSG_CHECKING(whether to enable assembler optimizations)
want_asm=true
AC_ARG_ENABLE(asm,
  [  --disable-asm           do not use assembler optimizations],
  [
    AC_MSG_RESULT(no)
    AC_DEFINE([SILC_NO_ASM], [], [SILC_NO_ASM])
    want_asm=false
  ],
  [
    AC_MSG_RESULT(yes)
    want_asm=true
  ])
AM_CONDITIONAL(SILC_NO_ASM, test x$want_asm = xfalse)


##
##  With/without checkings
##

#ifndef SILC_DIST_TOOLKIT
# SILC Protocol Toolkit checking
AC_ARG_WITH(silc-includes,
  [  --with-silc-includes=DIR SILC Toolkit includes [search in DIR]],
  [ac_silc_includes="$withval"], [ac_silc_includes="no"])
AC_ARG_WITH(silc-libs,
  [  --with-silc-libs=DIR     SILC Toolkit libraries [search in DIR]],
  [ac_silc_libs="$withval"], [ac_silc_libs="no"])

if test -n "$with_silc_includes" || test -n "$with_silc_libs"; then

  # Manually provided libs
  if test "$ac_silc_includes" != "no"; then
    compile_libs=false
    SILC_LIB_INCLUDES="-I$ac_silc_includes"
    LIBSUBDIR=
  fi
  if test "$ac_silc_libs" != "no"; then
    compile_libs=false
    LIBSUBDIR=
    LDFLAGS="-L$ac_silc_libs $LDFLAGS"
  fi

  # Check libs to link against
  f=`$EGREP __SILC_HAVE_PTHREAD $ac_silc_includes/silc.h`
  if test -n "$f"; then
    LIBS="$LIBS -lpthread"
    check_threads=false
    has_threads=true
  fi
  f=`$EGREP __SILC_HAVE_SIM $ac_silc_includes/silc.h`
  if test -n "$f"; then
    LIBS="$LIBS -ldl"
  fi

else
  # pkg-config check
  PKG_CHECK_MODULES(SILC, [silc >= 1.2], compile_libs=false, compile_libs=true)
#ifdef SILC_DIST_CLIENTLIB
  PKG_CHECK_MODULES(SILCCLIENT, [silcclient >= 1.2], compile_libs=false, compile_libs=true)
#endif SILC_DIST_CLIENTLIB
#ifdef SILC_DIST_SERVERLIB
  PKG_CHECK_MODULES(SILCSERVER, silcserver, compile_libs=false, compile_libs=true)
#endif SILC_DIST_SERVERLIB

  if test x$compile_libs = xfalse; then
    LIBSUBDIR=
    LIBS="$SILC_LIBS $LIBS"
    CFLAGS="$CFLAGS $SILC_CFLAGS"
#ifdef SILC_DIST_CLIENTLIB
    LIBS="$SILCCLIENT_LIBS $LIBS"
    CFLAGS="$CFLAGS $SILCCLIENT_CFLAGS"
#endif SILC_DIST_CLIENTLIB
#ifdef SILC_DIST_SERVERLIB
    LIBS="$LIBS $SILCSERVER_LIBS"
    CFLAGS="$CFLAGS $SILCSERVER_CFLAGS"
#endif SILC_DIST_SERVERLIB
  fi
fi
#endif SILC_DIST_TOOLKIT

if test x$compile_libs = xtrue; then
SILC_LIB_INCLUDES="$SILC_LIB_INCLUDES -I$SILC_TOP_SRCDIR/lib/silccore"
SILC_LIB_INCLUDES="$SILC_LIB_INCLUDES -I$SILC_TOP_SRCDIR/lib/silcapputil"
SILC_LIB_INCLUDES="$SILC_LIB_INCLUDES -I$SILC_TOP_SRCDIR/lib/silcske"
#ifdef SILC_DIST_SFTP
SILC_LIB_INCLUDES="$SILC_LIB_INCLUDES -I$SILC_TOP_SRCDIR/lib/silcsftp"
#endif SILC_DIST_SFTP
#ifdef SILC_DIST_CLIENTLIB
SILC_LIB_INCLUDES="$SILC_LIB_INCLUDES -I$SILC_TOP_SRCDIR/lib/silcclient"
#endif SILC_DIST_CLIENTLIB
#ifdef SILC_DIST_SERVERLIB
SILC_LIB_INCLUDES="$SILC_LIB_INCLUDES -I$SILC_TOP_SRCDIR/lib/silcserver"
#endif SILC_DIST_SERVERLIB
#ifdef SILC_DIST_VCARD
SILC_LIB_INCLUDES="$SILC_LIB_INCLUDES -I$SILC_TOP_SRCDIR/lib/silcvcard"
#endif SILC_DIST_VCARD
fi

# SOCKS4 support checking
SAVE_LIBS="$LIBS"
SAVE_CFLAGS="$CFLAGS"
SAVE_LDFLAGS="$LDFLAGS"
AC_MSG_CHECKING(whether to support SOCKS4)
AC_ARG_WITH(socks4,
  [[  --with-socks4[=DIR]     with SOCKS4 support [search in DIR/lib and DIR/include]]],
  [
    case "$withval" in
      no)
        AC_MSG_RESULT(no)
        ;;
      *)
        AC_MSG_RESULT(yes)
        socks=4

        if test -d "$withval/include"; then
          CFLAGS="$CFLAGS -I$withval/include"
        fi
        if test -d "$withval/lib"; then
          LDFLAGS="$LDFLAGS -L$withval/lib"
        fi

        LIBS="-lsocks $LIBS"
        ;;
    esac

    AC_TRY_LINK([],
      [
        Rconnect();
      ], [],
      [
        AC_MSG_ERROR(Could not find SOCKS4 library.)
        LIBS="$SAVE_LIBS"
        CFLAGS="$SAVE_CFLAGS"
        LDFLAGS="$SAVE_LDFLAGS"
      ])
  ],
    AC_MSG_RESULT(no)
  )

# SOCKS5 support checking
SAVE_LIBS="$LIBS"
SAVE_CFLAGS="$CFLAGS"
SAVE_LDFLAGS="$LDFLAGS"
AC_MSG_CHECKING(whether to support SOCKS5)
AC_ARG_WITH(socks5,
  [[  --with-socks5[=DIR]     with SOCKS5 support [search in DIR/lib and DIR/include]]],
  [
    case "$withval" in
      no)
        AC_MSG_RESULT(no)
        ;;
      *)
        AC_MSG_RESULT(yes)
        socks=5

        if test -d "$withval/include"; then
          CFLAGS="$CFLAGS -I$withval/include"
        fi
        if test -d "$withval/lib"; then
          LDFLAGS="$LDFLAGS -L$withval/lib"
        fi

        LIBS="-lsocks5 $LIBS"
        ;;
    esac

    AC_TRY_LINK([],
      [
        SOCKSconnect();
      ], [],
      [
        AC_MSG_ERROR(Could not find SOCKS5 library.)
        LIBS="$SAVE_LIBS"
        CFLAGS="$SAVE_CFLAGS"
        LDFLAGS="$SAVE_LDFLAGS"
      ])
  ],
    AC_MSG_RESULT(no)
  )

if test "x$socks" = "x4"; then
  AC_DEFINE([SOCKS], [], [Socks])
  CFLAGS="$CFLAGS -Dconnect=Rconnect -Dgetsockname=Rgetsockname -Dbind=Rbind -Daccept=Raccept -Dlisten=Rlisten -Dselect=Rselect"
fi

if test "x$socks" = "x5"; then
  AC_DEFINE([SOCKS], [], [Socks])
  AC_DEFINE([SOCKS5], [], [Socks5])
  AC_DEFINE([Rconnect], [SOCKSconnect], [Socks])
  AC_DEFINE([Rgetsockname], [SOCKSgetsockname], [Socks])
  AC_DEFINE([Rgetpeername], [SOCKSgetpeername], [Socks])
  AC_DEFINE([Rbind], [SOCKSbind], [Socks])
  AC_DEFINE([Raccept], [SOCKSaccept], [Socks])
  AC_DEFINE([Rlisten], [SOCKSlisten], [Socks])
  AC_DEFINE([Rselect], [SOCKSselect], [Socks])
  AC_DEFINE([Rrecvfrom], [SOCKSrecvfrom], [Socks])
  AC_DEFINE([Rsendto], [SOCKSsendto], [Socks])
  AC_DEFINE([Rrecv], [SOCKSrecv], [Socks])
  AC_DEFINE([Rsend], [SOCKSsend], [Socks])
  AC_DEFINE([Rread], [SOCKSread], [Socks])
  AC_DEFINE([Rwrite], [SOCKSwrite], [Socks])
  AC_DEFINE([Rrresvport], [SOCKSrresvport], [Socks])
  AC_DEFINE([Rshutdown], [SOCKSshutdown], [Socks])
  AC_DEFINE([Rlisten], [SOCKSlisten], [Socks])
  AC_DEFINE([Rclose], [SOCKSclose], [Socks])
  AC_DEFINE([Rdup], [SOCKSdup], [Socks])
  AC_DEFINE([Rdup2], [SOCKSdup2], [Socks])
  AC_DEFINE([Rfclose], [SOCKSfclose], [Socks])
  AC_DEFINE([Rgethostbyname], [SOCKSgethostbyname], [Socks])
fi


##
## Native WIN32 compilation under cygwin
##
AC_MSG_CHECKING(whether to compile native WIN32 code)
AC_ARG_WITH(win32,
  [  --with-win32            compile native WIN32 (MinGW) code (-mno-cygwin)],
  [
    AC_MSG_RESULT(yes)
    AC_DEFINE([SILC_WIN32], [], [SILC_WIN32])
    win32_support=true
    CFLAGS="-mno-cygwin $CFLAGS"
    LIBS="$LIBS -lwsock32"
  ],
  [
    AC_MSG_RESULT(no)
  ])
AM_CONDITIONAL(SILC_WIN32, test x$win32_support = xtrue)


#ifdef SILC_DIST_SERVER
without_silcd=false
#endif SILC_DIST_SERVER
#ifdef SILC_DIST_CLIENT
AM_CONDITIONAL(with_irssi, true)
#endif SILC_DIST_CLIENT
#ifdef SILC_DIST_INPLACE
without_irssi=false
without_silcd=false
#endif SILC_DIST_INPLACE


##
## Include configure fragments
##
AD_INCLUDE_CONFIGURE


##
## Outputs and substitutions
##

AC_SUBST(LIBSUBDIR)
AC_SUBST(SILC_TOP_SRCDIR)
AC_SUBST(LDFLAGS)
AC_SUBST(LIBS)
AC_SUBST(SILC_LIB_INCLUDES)
AC_SUBST(__SILC_PACKAGE_VERSION)

AC_SUBST(ETCDIR)
AC_DEFINE_UNQUOTED([SILC_ETCDIR], "$ETCDIR", [SILC_ETCDIR])

#ifndef SILC_DIST_AUTODIST
ETCDIR=`eval echo $sysconfdir`;ETCDIR=`eval echo $ETCDIR`
AC_SUBST(ETCDIR)
AC_DEFINE_UNQUOTED([SILC_ETCDIR], "$ETCDIR", [SILC_ETCDIR])

DOCDIR=`eval echo $docdir`;DOCDIR=`eval echo $DOCDIR`
AC_SUBST(DOCDIR)
AC_DEFINE_UNQUOTED([SILC_DOCDIR], "$DOCDIR", [SILC_DOCDIR])
#endif SILC_DIST_AUTODIST

# Native Symbian OS support (disabled by default)
AM_CONDITIONAL(SILC_SYMBIAN, test xfalse = xtrue)

# Make enable-shared aware
AM_CONDITIONAL(SILC_ENABLE_SHARED, test "$enable_shared" = yes)

INCLUDE_DEFINES_INT="include \$(top_srcdir)/Makefile.defines_int"
AC_SUBST(INCLUDE_DEFINES_INT)

DATE=`date`
AC_SUBST(DATE)


#
# Makefile outputs
#
AC_CONFIG_FILES(
Makefile
#ifdef SILC_DIST_DOC
doc/Makefile
#endif SILC_DIST_DOC
Makefile.defines
Makefile.defines_int
includes/Makefile
includes/silcversion.h
includes/silc.h
#ifdef SILC_DIST_APPS
apps/Makefile
#endif SILC_DIST_APPS
)

#ifdef SILC_DIST_TOOLKIT
AC_CONFIG_FILES(
win32/Makefile
win32/libsilc/Makefile
win32/libsilcclient/Makefile
tutorial/Makefile
tutorial/Makefile.defines
tutorial/Makefile.defines_int
)
#endif SILC_DIST_TOOLKIT

if test x$compile_libs = xtrue; then

AC_CONFIG_FILES(
lib/Makefile
lib/silccore/Makefile
lib/silcske/Makefile
lib/silcapputil/Makefile
#ifdef SILC_DIST_SFTP
lib/silcsftp/Makefile
lib/silcsftp/tests/Makefile
#endif SILC_DIST_SFTP
)

#ifdef SILC_DIST_TOOLKIT
AC_CONFIG_FILES(
lib/silc.pc
lib/silcclient.pc
lib/silcserver.pc
)
#endif SILC_DIST_TOOLKIT

#ifdef SILC_DIST_CLIENTLIB
AC_CONFIG_FILES(
lib/silcclient/Makefile
lib/silcclient/tests/Makefile
)
#endif SILC_DIST_CLIENTLIB

#ifdef SILC_DIST_SERVERLIB
AC_CONFIG_FILES(
lib/silcserver/Makefile
lib/silcserver/tests/Makefile
)
#endif SILC_DIST_SERVERLIB

#ifdef SILC_DIST_VCARD
AC_CONFIG_FILES(
lib/silcvcard/Makefile
)
#endif SILC_DIST_VCARD

fi	# compile_libs

AC_OUTPUT

s_bindir=`eval echo $bindir`;s_bindir=`eval echo $s_bindir`
s_sbindir=`eval echo $sbindir`;s_sbindir=`eval echo $s_sbindir`
s_mandir=`eval echo $mandir`;s_mandir=`eval echo $s_mandir`
s_includedir=`eval echo $includedir`;s_includedir=`eval echo $s_includedir`

echo ""
echo "$PACKAGE Configuration Summary:"
echo "---------------------------"
echo " Target host ...................: $target"
echo " Compiler ......................: $CC"
echo " CFLAGS ........................: $CFLAGS"
echo " LDFLAGS .......................: $LDFLAGS"
echo " LIBS ..........................: $LIBS"
echo ""
echo " Installation prefix ...........: $prefix"
echo " bin directory .................: $s_bindir"
echo " sbin directory ................: $s_sbindir"
echo " etc directory .................: $ETCDIR"
echo " man directory .................: $s_mandir"
echo " doc directory .................: $DOCDIR"
#ifdef SILC_DIST_INCLUDES
echo " include directory .............: $s_includedir"
#endif SILC_DIST_INCLUDES
echo ""

#ifdef SILC_DIST_CLIENT
if test x$without_irssi = xtrue; then
  irssi="no"
fi
echo " Compile SILC Client ...........: $irssi"
#endif SILC_DIST_CLIENT

#ifdef SILC_DIST_SERVER
if test x$without_silcd = xtrue; then
  silcd="no"
fi
echo " Compile SILC Server ...........: $silcd"
#endif SILC_DIST_SERVER

echo " Debugging enabled .............: $summary_debug"
echo ""
echo "Compile the sources with 'make' or 'gmake' command."
