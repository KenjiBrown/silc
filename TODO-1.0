TODO After 1.0
==============

A rough list of stuff that is going to be done to SILC after 1.0 or at
least could be done.

 o Implement the defined SilcDH API.  The definition is in
   lib/silccrypt/silcdh.h.

 o X.509 certificate support.  SILC protocol supports certificates and
   it would be great to have support for them.  This is a big task as
   support has to be made for ASN.1 as well.  I've looked into OpenSSL 
   package as it has X.509 certificate support (and ASN.1 as well).  
   The code does not look very good to my eye but it has some potentials.
   This should be looked at more closely.

   Naturally own SILC Certificate API has to be defined regardles what
   the actual X.509 library is (OpenSSL X.509 or something else).  Other
   choice is to write own X.509 library but I'm not going to do it - 
   I can help to migrate the OpenSSL X.509 into SILC and I can help if 
   someone would like to write the X.509 library - but I'm not going 
   to start writing one myself.  Anyhow, the OpenSSL X.509 lib should
   be checked.

   Other package that should be checked is the NSS's X509 library,
   which I like more over OpenSSL package.

 o SSH2 public keys support, allowing the use of SSH2 public keys in
   SILC.

 o OpenPGP certificate support, allowing the use of PGP public keys
   in SILC.

 o Compression routines are missing.  The protocol supports packet
   compression thus it must be implemented.  SILC Zip API must be
   defined.

 o Optimizations in Libraries

	o There is currently three (3) allocations per packet in the
	  silc_packet_receive_process, which is used to process and
	  dispatch all packets in the packet queue to the parser callback
	  function.  First allocation is for parse_ctx, second for the
	  SilcPacketContext, and third for packet->buffer where the actual
	  data is saved.

	  The parse_ctx allocation can be removed by adding it as a
	  structure to the SilcPacketContext.  When the SilcPacketContext
	  is allocated there is space for the parse context already.

	  The silc_packet_context_alloc could have a free list of
	  packet contexts.  If free packet context is found from the list
	  it is returned instead of allocating a new one.  The library
	  could at first allocate them and save them to the free list
	  until enough contexts for smooth processing exists in the list.
	  This would remove a big allocation since the structure is
	  quite big, and even bigger if it would include the parse_ctx.

	  The packet->buffer can be optimized too if the SilcBuffer
	  interface would support free lists as well.  Maybe such could
	  be done in the same way as for SilcPacketContext.  The
	  silc_buffer_alloc would check free list before actually 
	  allocating new memory.  Since the packets in the SILC protocol
	  usually are about the same size (due to padding) it would be
	  easy to find suitable size buffer from the free list very
	  quickly.

	  These naturally cause the overal memory consumption to grow
	  but would take away many allocations that can be done several
	  times in a second (see also ~/silcpacket).

	o Move the actual file descriptor task callback (the callback that
	  handles the incoming data, outgoing data etc, that is implemnted
	  in server and client separately (silc_server_packet_process and
	  silc_client_packet_proces)) to the low level socket connection
	  handling routines, and create an interface where the application
	  can register a callbacks for incoming data, outoing data and EOF
	  receiving, which the library will call when necessary.  This way 
	  we can move the data handling in one place.

	o Add silc_id_str2id to accept the destination buffer as argument
	  and thus not require any memory allocation.  Same will happen
	  with silc_id_payload_* functions.

	o Remove the `truelen' field from SilcBuffer as it is entirely
	  redundant since we can get the true length of the buffer by
	  doing buffer->end - buffer->header.  Add SILC_BUFFER_TRUELEN
	  macro instead.  Consider also removing `len' field too since
	  it effectively is buffer->tail - buffer->data, and adding
	  SILC_BUFFER_LEN macro can do the same.  These would save
	  totally 8 bytes of memory per buffer.

 o Optimizations in Server

	o Remove the big switch statement from the function 
	  silc_server_packet_parse_type and replace it with predefined
	  table of function pointers where each of the slot in table
	  represents the packet type value.

	  Same could be done with notify packets which has big switch 
	  statement too.  Same kind of table of notify callbacks could be
	  done as well.

	o The parser callback in the server will add a timeout task for
	  all packets.  It will require registering and allocating a
	  new task to the SilcSchedule.  Maybe, at least, for server
	  and router packets the parser would be called immediately
	  instead of adding it to the scheduler with 0 timeout.  It
	  should be analyzed too how slow the task registering process
	  actually is, and find out ways to optimize it.

	o The SERVER_SIGNOFF notify handing is not optimal, because it'll
	  cause sending of multiple SIGNOFF notify's instead of the one
	  SERVER_SIGNOFF notify that the server received.  This should be
	  optimized so that the only SERVER_SIGNOFF is sent and not
	  SIGNOFF of notify at all (using SIGNOFF takes the idea about
	  SERVER_SIGNOFF away entirely).

	o See also ~/silcserver

 o Add SilcAsyncOperation to utility library.  Any function that takes
   callback as an argument must/should return SilcAsyncOperation (see 
   ~/silcasync).

 o Rewrite SilcProtocol to be SilcFSM (see ~/silcfsm).

 o Do some scheduler optimizations and interface changes (see 
   ~/silcschedule).

 o Change the lib/silccore/silcpacket.[ch] interfaces (see ~/silcpacket).

 o Add abstract SilcStream and SilcSocketStream (see ~/silcstream).

 o Change some of the SILC Net interfaces (see ~/silcnet).

 o Add DSS support.

 o SILC RNG does not implement random seed files, and they should be
   implemented.

 o Cipher optimizations (asm, that this) at least for i386 would be nice.

 o Add builtin SOCKS and HTTP Proxy support, well the SOCKS at least.
   SILC currently supports SOCKS4 and SOCKS5 but it needs to be compiled
   in separately.

 o Add a timeout to handling incoming JOIN commands.  It should be 
   enforced that JOIN command is executed only once in a second or two
   seconds.  Now it is possible to accept n incoming JOIN commands
   and process them without any timeouts.  THis must be employed because
   each JOIN command will create and distribute the new channel key
   to everybody on the channel (Fix this to 0.9.x).

 o EPOC specific additions/changes required:

	o lib/silcutil/epoc routines missing or not completed.

	o The PKCS#1 also calls global RNG (even though it is not used 
	  currently in SILC, the interface allows its use).

	o Something needs to be thought to the logging globals as well, 
	  like silc_debug etc.  They won't work on EPOC.  Perhaps logging
	  and debugging is to be disabled on EPOC.

 o Check whether we can fully comply with RFC 2779.

